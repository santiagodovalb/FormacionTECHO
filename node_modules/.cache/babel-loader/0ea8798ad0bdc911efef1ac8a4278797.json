{"ast":null,"code":"var minimos=function minimos(user,bloques){var bloquesMinimos=bloques.filter(function(bloque){return bloque.minimo===true;});var userBloques=bloquesMinimos.filter(function(bloque){return bloque.roles.map(function(rol){return rol.id;}).includes(user.rolId);});var entregados=user.entregas.filter(function(entrega){return entrega.bloque.minimo===true&&entrega.aprobado===true;});return\"\".concat(entregados.length,\"/\").concat(userBloques.length);};var minimosCompletados=function minimosCompletados(user){var entregados=user.entregas?user.entregas.filter(function(entrega){return entrega.bloque.minimo===true&&entrega.aprobado===true;}):[];return entregados.length;};var minimosTotal=function minimosTotal(user,bloques){var bloquesMinimos=bloques.filter(function(bloque){return bloque.minimo===true;});var userBloques=bloquesMinimos.filter(function(bloque){return bloque.roles.map(function(rol){return rol.id;}).includes(user.rolId);});return userBloques.length;};var opcionales=function opcionales(user,bloques){var bloquesOpcionales=bloques.filter(function(bloque){return bloque.minimo===false;});var userBloques=bloquesOpcionales.filter(function(bloque){return bloque.roles.map(function(rol){return rol.id;}).includes(user.rolId);});var entregados=user.entregas.filter(function(entrega){return entrega.bloque.minimo===false&&entrega.aprobado===true;});return\"\".concat(entregados.length,\"/\").concat(userBloques.length);};var opcionalesCompletados=function opcionalesCompletados(user){var entregados=user.entregas?user.entregas.filter(function(entrega){return entrega.bloque.minimo===false&&entrega.aprobado===true;}):[];return entregados.length;};var opcionalesTotal=function opcionalesTotal(user,bloques){var bloquesMinimos=bloques.filter(function(bloque){return bloque.minimo===false;});var userBloques=bloquesMinimos.filter(function(bloque){return bloque.roles.map(function(rol){return rol.id;}).includes(user.rolId);});return userBloques.length;};var pendientes=function pendientes(user){return user.entregas.filter(function(entrega){return entrega.aprobado===false;}).length;};var totalPendientes=function totalPendientes(voluntarios){var entregas=voluntarios.map(function(voluntario){return voluntario.entregas.map(function(entrega){return entrega.aprobado;});});var pendientes=entregas.flat().filter(function(state){return state===false;});return pendientes.length;};var totalMinimos=function totalMinimos(voluntarios,bloques){var bloquesMinimos=bloques.filter(function(bloque){return bloque.minimo===true;});var totalMin=0;var aprobados=0;var _loop=function _loop(i){var userBloques=bloquesMinimos.filter(function(bloque){return bloque.roles.map(function(rol){return rol.id;}).includes(voluntarios[i].rolId);}).length;totalMin+=userBloques;aprobados+=voluntarios[i].entregas.filter(function(entrega){return entrega.bloque.minimo===true&&entrega.aprobado===true;}).length;};for(var i=0;i<voluntarios.length;i++){_loop(i);}return\"\".concat(aprobados,\"/\").concat(totalMin);};var totalOpcionales=function totalOpcionales(voluntarios,bloques){var bloquesMinimos=bloques.filter(function(bloque){return bloque.minimo===false;});var totalMin=0;var aprobados=0;var _loop2=function _loop2(i){var userBloques=bloquesMinimos.filter(function(bloque){return bloque.roles.map(function(rol){return rol.id;}).includes(voluntarios[i].rolId);}).length;totalMin+=userBloques;aprobados+=voluntarios[i].entregas.filter(function(entrega){return entrega.bloque.minimo===false&&entrega.aprobado===true;}).length;};for(var i=0;i<voluntarios.length;i++){_loop2(i);}return\"\".concat(aprobados,\"/\").concat(totalMin);};export{totalMinimos,totalOpcionales,totalPendientes,minimos,opcionales,pendientes,minimosCompletados,opcionalesCompletados,minimosTotal,opcionalesTotal};","map":{"version":3,"sources":["/home/santi/P5/TECHO/formacion-techo/src/containers/Gestor/DashboardGestor/dashUtils.js"],"names":["minimos","user","bloques","bloquesMinimos","filter","bloque","minimo","userBloques","roles","map","rol","id","includes","rolId","entregados","entregas","entrega","aprobado","length","minimosCompletados","minimosTotal","opcionales","bloquesOpcionales","opcionalesCompletados","opcionalesTotal","pendientes","totalPendientes","voluntarios","voluntario","flat","state","totalMinimos","totalMin","aprobados","i","totalOpcionales"],"mappings":"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","sourcesContent":["const minimos = (user, bloques) => {\n    const bloquesMinimos = bloques.filter(bloque => bloque.minimo === true)\n    const userBloques = bloquesMinimos.filter(bloque => bloque.roles.map(rol => rol.id).includes(user.rolId))\n    const entregados = user.entregas.filter(entrega => entrega.bloque.minimo === true && entrega.aprobado === true)\n    return `${entregados.length}/${userBloques.length}`\n}\n\nconst minimosCompletados = (user) => {\n    const entregados = user.entregas? user.entregas.filter(entrega => entrega.bloque.minimo === true && entrega.aprobado === true) : []\n    return entregados.length\n}\n\nconst minimosTotal = (user,bloques) =>{\n    const bloquesMinimos = bloques.filter(bloque => bloque.minimo === true)\n    const userBloques = bloquesMinimos.filter(bloque => bloque.roles.map(rol => rol.id).includes(user.rolId))\n    return userBloques.length\n}\n\nconst opcionales = (user, bloques) => {\n    const bloquesOpcionales = bloques.filter(bloque => bloque.minimo === false)\n    const userBloques = bloquesOpcionales.filter(bloque => bloque.roles.map(rol => rol.id).includes(user.rolId))\n    const entregados = user.entregas.filter(entrega => entrega.bloque.minimo === false && entrega.aprobado === true)\n    return `${entregados.length}/${userBloques.length}`\n}\n\nconst opcionalesCompletados = (user) => {\n    \n    const entregados = user.entregas? user.entregas.filter(entrega => entrega.bloque.minimo === false && entrega.aprobado === true) : []\n    return entregados.length\n}\n\nconst opcionalesTotal = (user,bloques) =>{\n    const bloquesMinimos = bloques.filter(bloque => bloque.minimo === false)\n    const userBloques = bloquesMinimos.filter(bloque => bloque.roles.map(rol => rol.id).includes(user.rolId))\n    return userBloques.length\n}\n\nconst pendientes = (user) => {\n    return user.entregas.filter(entrega => entrega.aprobado === false).length\n}\n\nconst totalPendientes = (voluntarios) => {\n    let entregas = voluntarios.map(voluntario => voluntario.entregas.map(entrega => entrega.aprobado))\n    let pendientes = entregas.flat().filter(state => state === false)\n    return pendientes.length\n}\n\nconst totalMinimos = (voluntarios, bloques) => {\n    const bloquesMinimos = bloques.filter(bloque => bloque.minimo === true)\n    let totalMin = 0\n    let aprobados = 0\n    for (let i = 0; i < voluntarios.length; i++) {\n        const userBloques = bloquesMinimos.filter(bloque => bloque.roles.map(rol => rol.id).includes(voluntarios[i].rolId)).length\n        totalMin += userBloques\n        aprobados += voluntarios[i].entregas.filter(entrega => entrega.bloque.minimo === true && entrega.aprobado === true).length\n\n    }\n    return `${aprobados}/${totalMin}`\n}\n\nconst totalOpcionales = (voluntarios, bloques) => {\n    const bloquesMinimos = bloques.filter(bloque => bloque.minimo === false)\n    let totalMin = 0\n    let aprobados = 0\n    for (let i = 0; i < voluntarios.length; i++) {\n        const userBloques = bloquesMinimos.filter(bloque => bloque.roles.map(rol => rol.id).includes(voluntarios[i].rolId)).length\n        totalMin += userBloques\n        aprobados += voluntarios[i].entregas.filter(entrega => entrega.bloque.minimo === false && entrega.aprobado === true).length\n\n    }\n    return `${aprobados}/${totalMin}`\n}\n\nexport { totalMinimos, totalOpcionales, totalPendientes, minimos, opcionales, pendientes, minimosCompletados, opcionalesCompletados,minimosTotal,opcionalesTotal }"]},"metadata":{},"sourceType":"module"}