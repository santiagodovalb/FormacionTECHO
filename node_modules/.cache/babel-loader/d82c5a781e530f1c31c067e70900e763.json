{"ast":null,"code":"var _jsxFileName = \"/home/santi/P5/TECHO/formacion-techo/src/containers/Gestor/DashboardGestor/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { useHistory } from 'react-router';\nimport { Table } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DashboardGestor() {\n  _s();\n\n  var _user$sede;\n\n  const user = useSelector(state => state.user);\n  const bloques = useSelector(state => state.bloques);\n  const [voluntarios, setVoluntarios] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    axios.get(`/api/users/sede/${user.sedeId}`).then(res => res.data).then(voluntarios => setVoluntarios(voluntarios.filter(voluntario => voluntario.rolId > 2))).catch(err => err);\n  }, [user, bloques]);\n\n  const minimos = user => {\n    const bloques = bloques.map(bloque => bloque.rolId === user.rolId);\n    const entregados = user.entregas.map(entrega => entrega.bloque.minimo === true);\n    return `${entregados.length}`;\n  };\n\n  const columns = [{\n    title: 'Voluntario',\n    dataIndex: 'voluntario',\n    key: 'voluntario'\n  }, {\n    title: 'Bloques minimos',\n    dataIndex: 'bloquesMinimos',\n    key: 'bloquesMinimos'\n  }, {\n    title: 'Bloques opcionales',\n    dataIndex: 'bloquesOpcionales',\n    key: 'bloquesOpcionales'\n  }, {\n    title: 'Entregas pendientes',\n    dataIndex: 'entregasPendientes',\n    key: 'entregasPendientes'\n  }];\n  const dataSource = voluntarios === null || voluntarios === void 0 ? void 0 : voluntarios.map(voluntario => {\n    return {\n      key: voluntario.id,\n      voluntario: voluntario.full_name,\n      bloquesMinimos: entrega.bloque.titulo,\n      estado: entrega.aprobado ? 'Completado' : 'Pendiente',\n      fecha: date(entrega.updatedAt)\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Dashboard de \", (_user$sede = user.sede) === null || _user$sede === void 0 ? void 0 : _user$sede.nombre]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), console.log('VOLS', voluntarios)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DashboardGestor, \"ev2HWEaJOR860FZn0z11F/KVTrI=\", false, function () {\n  return [useSelector, useSelector, useHistory];\n});\n\n_c = DashboardGestor;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardGestor\");","map":{"version":3,"sources":["/home/santi/P5/TECHO/formacion-techo/src/containers/Gestor/DashboardGestor/index.jsx"],"names":["React","useEffect","useState","useSelector","axios","useHistory","Table","DashboardGestor","user","state","bloques","voluntarios","setVoluntarios","history","get","sedeId","then","res","data","filter","voluntario","rolId","catch","err","minimos","map","bloque","entregados","entregas","entrega","minimo","length","columns","title","dataIndex","key","dataSource","id","full_name","bloquesMinimos","titulo","estado","aprobado","fecha","date","updatedAt","sede","nombre","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport axios from 'axios'\nimport { useHistory } from 'react-router'\nimport { Table } from 'antd'\n\nexport default function DashboardGestor() {\n\n    const user = useSelector(state => state.user)\n    const bloques = useSelector(state => state.bloques)\n    const [voluntarios, setVoluntarios] = useState([])\n    const history = useHistory();\n\n    useEffect(() => {\n\n        axios.get(`/api/users/sede/${user.sedeId}`)\n        .then(res => res.data)\n        .then(voluntarios => setVoluntarios(voluntarios.filter(voluntario => voluntario.rolId > 2)))\n        .catch(err => err)\n    }, [user, bloques])\n\n    const minimos = (user) => {\n        const bloques = bloques.map(bloque => bloque.rolId === user.rolId)\n        const entregados = user.entregas.map(entrega => entrega.bloque.minimo === true)\n        return `${entregados.length }`\n    }\n\n    const columns = [\n        {\n            title: 'Voluntario',\n            dataIndex: 'voluntario',\n            key: 'voluntario',\n        },\n        {\n            title: 'Bloques minimos',\n            dataIndex: 'bloquesMinimos',\n            key: 'bloquesMinimos',\n        },\n        {\n            title: 'Bloques opcionales',\n            dataIndex: 'bloquesOpcionales',\n            key: 'bloquesOpcionales',\n        },\n        {\n            title: 'Entregas pendientes',\n            dataIndex: 'entregasPendientes',\n            key: 'entregasPendientes',\n        }\n    ]\n\n    const dataSource = voluntarios?.map(voluntario => {\n        return (\n          {\n            key: voluntario.id,\n            voluntario: voluntario.full_name,\n            bloquesMinimos: entrega.bloque.titulo,\n            estado: entrega.aprobado ? 'Completado' : 'Pendiente',\n            fecha: date(entrega.updatedAt),\n          }\n        )\n      })\n\n\n    return (\n        <div>\n            <h1>Dashboard de {user.sede?.nombre}</h1>\n            {console.log('VOLS', voluntarios)}\n            {/* <Table columns={columns} dataSoure={dataSource} pagination={false} /> */}\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}