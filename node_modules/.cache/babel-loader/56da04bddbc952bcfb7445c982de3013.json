{"ast":null,"code":"var _jsxFileName = \"/home/santi/P5/TECHO/formacion-techo/src/containers/Gestor/DashboardGestor/index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport { useHistory } from 'react-router';\nimport { Table } from 'antd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function DashboardGestor() {\n  _s();\n\n  var _user$sede;\n\n  const user = useSelector(state => state.user);\n  const bloques = useSelector(state => state.bloques);\n  const [voluntarios, setVoluntarios] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    axios.get(`/api/users/sede/${user.sedeId}`).then(res => res.data).then(voluntarios => setVoluntarios(voluntarios.filter(voluntario => voluntario.rolId > 2))).catch(err => err);\n  }, [user, bloques]);\n\n  const minimos = user => {\n    const userBloques = bloques.filter(bloque => bloque.minimo === true).filter(bloque => bloque.roles.map(bloque => bloque.rolId));\n    const entregados = user.entregas.map(entrega => entrega.bloque.minimo === true);\n    return `${entregados.length}/${userBloques.length}`;\n  };\n\n  const opcionales = user => {\n    const userBloques = bloques.filter(bloque => bloque.roles.includes(user.rolId) && bloque.minimo === false);\n    const entregados = user.entregas.map(entrega => entrega.bloque.minimo === false);\n    return `${entregados.length}/${userBloques.length}`;\n  };\n\n  const pendientes = user => {\n    return user.entregas.filter(entrega => entrega.aprobado === false).length;\n  };\n\n  const columns = [{\n    title: 'Voluntario',\n    dataIndex: 'voluntario',\n    key: 'voluntario'\n  }, {\n    title: 'Bloques minimos',\n    dataIndex: 'bloquesMinimos',\n    key: 'bloquesMinimos'\n  }, {\n    title: 'Bloques opcionales',\n    dataIndex: 'bloquesOpcionales',\n    key: 'bloquesOpcionales'\n  }, {\n    title: 'Entregas pendientes',\n    dataIndex: 'entregasPendientes',\n    key: 'entregasPendientes'\n  }];\n  const dataSource = voluntarios.map(voluntario => {\n    return {\n      key: voluntario.id,\n      voluntario: voluntario.full_name,\n      bloquesMinimos: minimos(voluntario),\n      bloquesOpcionales: opcionales(voluntario),\n      entregasPendientes: pendientes(voluntario)\n    };\n  }); // const dataSource = [...dataVoluntarios, {\n  //     {\n  //         key: 'total',\n  //         voluntario: voluntarios.length,\n  //         bloquesMinimos: minimos(voluntario),\n  //         bloquesOpcionales: opcionales(voluntario),\n  //         entregasPendientes: pendientes(voluntario),\n  //       }\n  // }]\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [console.log('BLOQUES', bloques), console.log('SOURCE', dataSource), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Dashboard de \", (_user$sede = user.sede) === null || _user$sede === void 0 ? void 0 : _user$sede.nombre]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), console.log('VOLS', voluntarios), /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      dataSoure: dataSource,\n      pagination: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(DashboardGestor, \"ev2HWEaJOR860FZn0z11F/KVTrI=\", false, function () {\n  return [useSelector, useSelector, useHistory];\n});\n\n_c = DashboardGestor;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardGestor\");","map":{"version":3,"sources":["/home/santi/P5/TECHO/formacion-techo/src/containers/Gestor/DashboardGestor/index.jsx"],"names":["React","useEffect","useState","useSelector","axios","useHistory","Table","DashboardGestor","user","state","bloques","voluntarios","setVoluntarios","history","get","sedeId","then","res","data","filter","voluntario","rolId","catch","err","minimos","userBloques","bloque","minimo","roles","map","entregados","entregas","entrega","length","opcionales","includes","pendientes","aprobado","columns","title","dataIndex","key","dataSource","id","full_name","bloquesMinimos","bloquesOpcionales","entregasPendientes","console","log","sede","nombre"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,KAAT,QAAsB,MAAtB;;AAEA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AAAA;;AAEtC,QAAMC,IAAI,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACD,IAAhB,CAAxB;AACA,QAAME,OAAO,GAAGP,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACC,OAAhB,CAA3B;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAMW,OAAO,GAAGR,UAAU,EAA1B;AAEAJ,EAAAA,SAAS,CAAC,MAAM;AAEZG,IAAAA,KAAK,CAACU,GAAN,CAAW,mBAAkBN,IAAI,CAACO,MAAO,EAAzC,EACCC,IADD,CACMC,GAAG,IAAIA,GAAG,CAACC,IADjB,EAECF,IAFD,CAEML,WAAW,IAAIC,cAAc,CAACD,WAAW,CAACQ,MAAZ,CAAmBC,UAAU,IAAIA,UAAU,CAACC,KAAX,GAAmB,CAApD,CAAD,CAFnC,EAGCC,KAHD,CAGOC,GAAG,IAAIA,GAHd;AAIH,GANQ,EAMN,CAACf,IAAD,EAAOE,OAAP,CANM,CAAT;;AAQA,QAAMc,OAAO,GAAIhB,IAAD,IAAU;AACtB,UAAMiB,WAAW,GAAGf,OAAO,CAACS,MAAR,CAAeO,MAAM,IAAIA,MAAM,CAACC,MAAP,KAAkB,IAA3C,EAAiDR,MAAjD,CAAwDO,MAAM,IAAIA,MAAM,CAACE,KAAP,CAAaC,GAAb,CAAiBH,MAAM,IAAIA,MAAM,CAACL,KAAlC,CAAlE,CAApB;AACA,UAAMS,UAAU,GAAGtB,IAAI,CAACuB,QAAL,CAAcF,GAAd,CAAkBG,OAAO,IAAIA,OAAO,CAACN,MAAR,CAAeC,MAAf,KAA0B,IAAvD,CAAnB;AACA,WAAQ,GAAEG,UAAU,CAACG,MAAO,IAAGR,WAAW,CAACQ,MAAO,EAAlD;AACH,GAJD;;AAMA,QAAMC,UAAU,GAAI1B,IAAD,IAAU;AACzB,UAAMiB,WAAW,GAAGf,OAAO,CAACS,MAAR,CAAeO,MAAM,IAAIA,MAAM,CAACE,KAAP,CAAaO,QAAb,CAAsB3B,IAAI,CAACa,KAA3B,KAAqCK,MAAM,CAACC,MAAP,KAAkB,KAAhF,CAApB;AACA,UAAMG,UAAU,GAAGtB,IAAI,CAACuB,QAAL,CAAcF,GAAd,CAAkBG,OAAO,IAAIA,OAAO,CAACN,MAAR,CAAeC,MAAf,KAA0B,KAAvD,CAAnB;AACA,WAAQ,GAAEG,UAAU,CAACG,MAAO,IAAGR,WAAW,CAACQ,MAAO,EAAlD;AACH,GAJD;;AAMA,QAAMG,UAAU,GAAI5B,IAAD,IAAU;AACzB,WAAOA,IAAI,CAACuB,QAAL,CAAcZ,MAAd,CAAqBa,OAAO,IAAIA,OAAO,CAACK,QAAR,KAAqB,KAArD,EAA4DJ,MAAnE;AACH,GAFD;;AAIA,QAAMK,OAAO,GAAG,CACZ;AACIC,IAAAA,KAAK,EAAE,YADX;AAEIC,IAAAA,SAAS,EAAE,YAFf;AAGIC,IAAAA,GAAG,EAAE;AAHT,GADY,EAMZ;AACIF,IAAAA,KAAK,EAAE,iBADX;AAEIC,IAAAA,SAAS,EAAE,gBAFf;AAGIC,IAAAA,GAAG,EAAE;AAHT,GANY,EAWZ;AACIF,IAAAA,KAAK,EAAE,oBADX;AAEIC,IAAAA,SAAS,EAAE,mBAFf;AAGIC,IAAAA,GAAG,EAAE;AAHT,GAXY,EAgBZ;AACIF,IAAAA,KAAK,EAAE,qBADX;AAEIC,IAAAA,SAAS,EAAE,oBAFf;AAGIC,IAAAA,GAAG,EAAE;AAHT,GAhBY,CAAhB;AAuBA,QAAMC,UAAU,GAAG/B,WAAW,CAACkB,GAAZ,CAAgBT,UAAU,IAAI;AAC7C,WACE;AACEqB,MAAAA,GAAG,EAAErB,UAAU,CAACuB,EADlB;AAEEvB,MAAAA,UAAU,EAAEA,UAAU,CAACwB,SAFzB;AAGEC,MAAAA,cAAc,EAAErB,OAAO,CAACJ,UAAD,CAHzB;AAIE0B,MAAAA,iBAAiB,EAAEZ,UAAU,CAACd,UAAD,CAJ/B;AAKE2B,MAAAA,kBAAkB,EAAEX,UAAU,CAAChB,UAAD;AALhC,KADF;AASD,GAVgB,CAAnB,CAtDsC,CAkEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACI;AAAA,eACK4B,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBvC,OAAvB,CADL,EAEKsC,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,UAAtB,CAFL,eAGI;AAAA,gDAAkBlC,IAAI,CAAC0C,IAAvB,+CAAkB,WAAWC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,EAIKH,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBtC,WAApB,CAJL,eAKI,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE2B,OAAhB;AAAyB,MAAA,SAAS,EAAEI,UAApC;AAAgD,MAAA,UAAU,EAAE;AAA5D;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH;;GArFuBnC,e;UAEPJ,W,EACGA,W,EAEAE,U;;;KALIE,e","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport axios from 'axios'\nimport { useHistory } from 'react-router'\nimport { Table } from 'antd'\n\nexport default function DashboardGestor() {\n\n    const user = useSelector(state => state.user)\n    const bloques = useSelector(state => state.bloques)\n    const [voluntarios, setVoluntarios] = useState([])\n    const history = useHistory();\n\n    useEffect(() => {\n\n        axios.get(`/api/users/sede/${user.sedeId}`)\n        .then(res => res.data)\n        .then(voluntarios => setVoluntarios(voluntarios.filter(voluntario => voluntario.rolId > 2)))\n        .catch(err => err)\n    }, [user, bloques])\n\n    const minimos = (user) => {\n        const userBloques = bloques.filter(bloque => bloque.minimo === true).filter(bloque => bloque.roles.map(bloque => bloque.rolId))\n        const entregados = user.entregas.map(entrega => entrega.bloque.minimo === true)\n        return `${entregados.length}/${userBloques.length}`\n    }\n\n    const opcionales = (user) => {\n        const userBloques = bloques.filter(bloque => bloque.roles.includes(user.rolId) && bloque.minimo === false)\n        const entregados = user.entregas.map(entrega => entrega.bloque.minimo === false)\n        return `${entregados.length}/${userBloques.length}`\n    }\n\n    const pendientes = (user) => {\n        return user.entregas.filter(entrega => entrega.aprobado === false).length\n    }\n\n    const columns = [\n        {\n            title: 'Voluntario',\n            dataIndex: 'voluntario',\n            key: 'voluntario',\n        },\n        {\n            title: 'Bloques minimos',\n            dataIndex: 'bloquesMinimos',\n            key: 'bloquesMinimos',\n        },\n        {\n            title: 'Bloques opcionales',\n            dataIndex: 'bloquesOpcionales',\n            key: 'bloquesOpcionales',\n        },\n        {\n            title: 'Entregas pendientes',\n            dataIndex: 'entregasPendientes',\n            key: 'entregasPendientes',\n        }\n    ]\n\n    const dataSource = voluntarios.map(voluntario => {\n        return (\n          {\n            key: voluntario.id,\n            voluntario: voluntario.full_name,\n            bloquesMinimos: minimos(voluntario),\n            bloquesOpcionales: opcionales(voluntario),\n            entregasPendientes: pendientes(voluntario),\n          }\n        )\n      })\n\n    // const dataSource = [...dataVoluntarios, {\n    //     {\n    //         key: 'total',\n    //         voluntario: voluntarios.length,\n    //         bloquesMinimos: minimos(voluntario),\n    //         bloquesOpcionales: opcionales(voluntario),\n    //         entregasPendientes: pendientes(voluntario),\n    //       }\n    // }]\n\n    return (\n        <div>\n            {console.log('BLOQUES', bloques)}\n            {console.log('SOURCE', dataSource)}\n            <h1>Dashboard de {user.sede?.nombre}</h1>\n            {console.log('VOLS', voluntarios)}\n            <Table columns={columns} dataSoure={dataSource} pagination={false} />\n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}